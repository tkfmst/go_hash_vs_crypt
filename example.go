package main

// Sample JSON
// {
//   "v": 2,
//   "tid":"G-T8JSQCLDWE",
//   "gtm":"2oe4p0",
//   "_p":1477146715,
//   "_z":"ccd.NbB",
//   "_pp":1,
//   "cid":947181994.1650784513,
//   "ul":"ja",
//   "sr":"3413x1440",
//   "_s":1,
//   "sid":"1650976491",
//   "sct":2,
//   "seg":0,
//   "dl": "https://qubena.com/",
//   "dr2": "https://www.google.com/",
//   "dt":"TOP - Qubena（株式会社COMPASS） - AI型教材",
//   "en":"page_view",
//   "_ss":1
// }

import (
	"fmt"
	"strings"
)

func main() {
	key := []byte("abcdefghijklmnopqrstuvwxyz123456")

	/**
	 * Encrypt
	 */
	// // Plain Text
	// plaintext := Pkcs7Pad([]byte(`{"v": 2,"tid":"G-T8JSQCLDWE","gtm":"2oe4p0","_p":1477146715,"_z":"ccd.NbB","_pp":1,"cid":947181994.1650784513,"ul":"ja","sr":"3413x1440","_s":1,"sid":"1650976491","sct":2,"seg":0,"dl": "https://qubena.com/","dr2": "https://www.google.com/","dt":"TOP - Qubena（株式会社COMPASS） - AI型教材","en":"page_view","_ss":1}`))

	// iv, encrypted, err := Encrypt(plaintext, key)
	// if err != nil {
	// 	panic(err)
	// }

	// fmt.Printf("iv=%s\n", iv)
	// fmt.Printf("encrypted=%s\n", encrypted)

	// fmt.Println(iv)
	// fmt.Println(encrypted)

	/**
	 * Decrypt
	 */
	// Cipher
	// iv := []byte("433058064921cead01bfbcaeab0dd105")
	// cipher := []byte("bad5c0889f2d7c6e2c405b409e14eebeaac2ae89e1e51f9a87c0254378fd65eba8484eaf855831e72b299f50f925f4faebf209e794fd70e30e0a1d62127800c30afeb4de7429a5b7b2041f2b4d3f817015e62a8e1542d4563e4f98f0fc899db8b8839f728d43b3a09eec0e139b176856913062602505a2aa9648713c2dd6617775150a8c340147d0e6fe43c43476a4861bb37f8d23f75f7793ffff5965825f7a915e00f2471f544661b07b9c9519ecbf3a57cfa8132dd9c8806c4f987118b838db062a1bf9bd3c69ddadb9ba390272e2b12634e8cef91aa0f42e059a5e88ce066cdb7c0e706be9f12233ed2f2190709557d71d76d824da59c50f6a86fdec45193950a7027bcb1fcf000cea5d33dccf0d393cd74ccb1c92b9f8ce1e5cb96bbb7416d9ffe5114ef17af137c47014e5d9804ac9dd485b0f4f9bc3356a8064b734cc7f02620b5ad44de49cb315255879a641")
	iv := []byte{177, 104, 77, 21, 209, 108, 169, 103, 178, 94, 120, 176, 6, 200, 212, 51}

	encrypted := []byte{14, 182, 91, 183, 254, 67, 125, 227, 80, 20, 212, 45, 215, 18, 188, 205, 103, 123, 27, 35, 56, 117, 87, 150, 84, 26, 196, 185, 222, 201, 199, 16, 44, 249, 85, 27, 232, 27, 113, 172, 43, 222, 114, 60, 46, 179, 194, 234, 225, 156, 117, 46, 56, 182, 254, 206, 46, 249, 163, 60, 233, 70, 5, 250, 121, 27, 255, 67, 248, 123, 96, 246, 124, 78, 96, 71, 237, 55, 83, 139, 170, 159, 73, 189, 214, 254, 196, 249, 186, 16, 20, 250, 182, 243, 220, 115, 171, 255, 99, 53, 124, 6, 138, 254, 235, 58, 245, 133, 171, 105, 130, 153, 192, 1, 136, 155, 225, 161, 63, 172, 226, 74, 108, 31, 39, 233, 107, 52, 87, 208, 113, 194, 71, 99, 26, 210, 31, 193, 207, 204, 20, 155, 112, 25, 215, 90, 196, 136, 237, 80, 164, 5, 190, 38, 17, 145, 177, 199, 169, 34, 56, 178, 180, 43, 18, 36, 12, 2, 200, 87, 253, 250, 105, 20, 164, 196, 151, 82, 62, 150, 209, 31, 17, 111, 170, 202, 153, 143, 180, 178, 162, 95, 151, 43, 120, 80, 110, 154, 167, 178, 146, 222, 90, 64, 166, 149, 174, 134, 54, 52, 206, 186, 44, 22, 16, 22, 236, 171, 139, 84, 27, 79, 137, 37, 145, 131, 114, 61, 238, 248, 40, 22, 161, 125, 244, 20, 109, 36, 14, 53, 168, 178, 77, 80, 221, 202, 122, 193, 243, 227, 78, 150, 63, 208, 108, 51, 207, 136, 114, 240, 20, 169, 162, 4, 215, 228, 225, 87, 110, 139, 61, 235, 211, 178, 108, 176, 21, 107, 247, 32, 211, 3, 42, 116, 90, 38, 247, 75, 104, 231, 107, 240, 242, 223, 77, 24, 130, 120, 246, 193, 74, 224, 2, 174, 38, 172, 36, 82, 116, 228, 250, 201, 240, 115, 19, 168, 20, 44, 16, 243, 81, 172, 77, 52, 124, 251, 150, 87, 56, 113, 137, 76, 36, 75, 11, 232, 153, 130, 99, 13, 149, 157, 218, 26, 202, 153, 147, 148, 209, 3, 61, 74}

	result, err := Decrypt(encrypted, key, iv)

	if err != nil {
		panic(err)
	}

	fmt.Printf("%s\n", strings.TrimSpace(string(result)))
}
